---
import Layout from "../../layouts/Layout.astro";
import {
  BlogPost,
  contentfulClient,
  ContentlessPost,
} from "../../lib/contentful";
import { calculateTTR } from "../../lib/ttr";
import PaginationConsts from "../../consts/paginationConsts";
import PostCard from "../../components/postCard.astro";

interface Props {
  posts: ContentlessPost[];
  hasPrevPage: boolean;
  hasNextPage: boolean;
}

export async function getStaticPaths() {
  // Fetch a single item to allow for inspection of `total`.
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
    order: "-fields.date",
    limit: 1,
    skip: 0,
  });

  const totalItemCount = entries.total;
  const totalPageCount = Math.ceil(
    totalItemCount / PaginationConsts.itemsPerPage
  );

  const postsGroupedByPage = await Promise.all(
    [...Array(totalPageCount).keys()]
      .map((x) => x + 1) // Add 2 to account for 0 index, whereas page number starts at 1.
      .map(async (pageNumber) => {
        const entries = await contentfulClient.getEntries<BlogPost>({
          content_type: "blogPost",
          order: "-fields.date",
          limit: PaginationConsts.itemsPerPage,
          skip:
            ((pageNumber as any as number) - 1) * PaginationConsts.itemsPerPage,
        });

        const posts = entries.items.map((item) => ({
          title: item.fields.title,
          slug: item.fields.slug,
          description: item.fields.description,
          author: item.fields.author.fields,
          content: item.fields.content,
          date: new Date(item.fields.date).toLocaleDateString(),
          moreReading: item.fields.moreReading?.map((x) => x.fields),
          ttr: calculateTTR(item.fields.content),
          tags: item.metadata.tags.map((x) => x.sys.id),
          suggestedReading: item.fields.suggestedReading,
          coverImageUrl: item.fields.coverImage?.fields?.file?.url,
          coverImageAlt: item.fields.coverImageAlt,
        }));

        return {
          params: { pageNumber: pageNumber },
          props: {
            posts: posts,
            hasNextPage: pageNumber < totalPageCount,
            hasPrevPage: pageNumber > 1,
          },
        };
      })
  );

  return postsGroupedByPage;
}

const { pageNumber } = Astro.params;
const { posts, hasNextPage, hasPrevPage } = Astro.props;
---

<Layout title="WhatFor | Technical Blog">
  <main class="mx-auto max-w-5xl space-y-5">
    {posts?.map((post) => <PostCard post={post} />)}
    <div class="mx-5 flex justify-between space-x-5 lg:mx-0">
      {
        hasPrevPage ? (
          <div class="flex flex-1 justify-center lg:flex-initial">
            <a
              class="w-full bg-violet-600 px-4 py-2 text-center text-sm text-white hover:bg-violet-700 hover:text-gray-50"
              href={"/page/" + (parseInt(pageNumber!, 10) - 1)}
            >
              Previous
            </a>
          </div>
        ) : (
          <>&nbsp;</>
        )
      }
      {
        hasNextPage ? (
          <div class="flex flex-1 justify-center lg:flex-initial">
            <a
              class="w-full bg-violet-600 px-4 py-2 text-center text-sm text-white hover:bg-violet-700 hover:text-gray-50"
              href={"/page/" + (parseInt(pageNumber!, 10) + 1)}
            >
              Next
            </a>
          </div>
        ) : (
          <>&nbsp;</>
        )
      }
    </div>
  </main>
</Layout>
